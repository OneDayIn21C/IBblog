{
  
    
        "post0": {
            "title": "앱스토어 리뷰 크롤링",
            "content": "from selenium import webdriver from selenium.webdriver.common.keys import Keys from selenium.webdriver.remote.webelement import WebElement from selenium.webdriver import ActionChains import time from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC import pandas as pd import string import datetime from bs4 import BeautifulSoup import requests . import pandas as pd import pymysql . 1. &#45936;&#51060;&#53552; &#53356;&#47204;&#47553; . 1-1. &#46041;&#51201; &#54168;&#51060;&#51648; &#45936;&#51060;&#53552; &#48520;&#47084;&#50724;&#44592; (chromdriver &#54876;&#50857;) . chromedriver = &#39;/usr/local/bin/chromedriver&#39; driver = webdriver.Chrome(chromedriver) # 앱스토어 자란다 페이지 driver.get( &quot;https://apps.apple.com/kr/app/%EC%9E%90%EB%9E%80%EB%8B%A4/id1469857402#see-all/reviews&quot; ) # 동적 페이지의 데이터를 모두 불러오기 위해 스크롤을 가장 아래까지 내림 prev_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) while True: # 스크롤을 화면 가장 아래로 내린다 driver.execute_script(&quot;window.scrollTo(0,document.body.scrollHeight)&quot;) # 페이지 로딩 대기 time.sleep(0.5) # 현재 문서 높이를 가져와서 저장 curr_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) if (curr_height == prev_height): break else: prev_height = driver.execute_script( &quot;return document.body.scrollHeight&quot;) curr_height . 1-2. &#44060;&#48324; &#47532;&#48624; &#48149;&#49828;&#51032; ID &#53356;&#47204;&#47553; . box=driver.find_elements_by_class_name(&#39;l-column--equal-height&#39;) box_id = [] for i in box: box_id.append(i.get_attribute(&#39;id&#39;)) print(box_id[:3]) print(&quot; n 리뷰 박스 개수 =&quot;, len(box_id),&#39;개&#39;) . [&#39;ember89&#39;, &#39;ember91&#39;, &#39;ember93&#39;] 리뷰 박스 개수 = 45 개 . 1-3. &#47532;&#48624; &#45936;&#51060;&#53552; &#53356;&#47204;&#47553; . 앱스토어의 리뷰 데이터는 (1) 코멘트의 길이가 길거나 혹은 (2) 개발자의 답변이 있을 경우, 개별 리뷰 박스의 &#39;더 보기&#39; 버튼을 클릭해 데이터를 추가로 불어와야 크롤링 가능 . driver.find_element_by_id(&#39;ember101&#39;).find_element_by_class_name(&#39;we-clamp&#39;).text . &#39;아이가 공부를 너무 하기 싫어해서 고민이였는데 샘들이 친구처럼 놀아주면서 하니까 학습 효과가 너무 좋네요^^ 자주 애용해야겠어요. 아들두 쌤 또 언제 오냐구 그러고… 일반 학습지보다 나은듯~. 만족합니다^^&#39; . stars = driver.find_elements_by_class_name(&#39;we-star-rating--large&#39;) # 별점 date = driver.find_elements_by_class_name(&#39;we-customer-review__date&#39;) # 작성일 user = driver.find_elements_by_class_name(&#39;we-customer-review__user&#39;) # 작성자 title = driver.find_elements_by_class_name(&#39;we-customer-review__title&#39;) # 제목 . review = [] for id in enumerate(box_id): # 데이터 로드 대기 # time.sleep(1) # 박스에 &#39;더 보기&#39; 버튼이 있을 경우 try: # &#39;더 보기&#39; 클릭 button = driver.find_element_by_css_selector( f&quot;#{id[1]} &gt; div.we-customer-review.lockup &gt; blockquote:nth-child(4) &gt; button&quot; ) button.click() time.sleep(0.2) review.append( driver.find_element_by_class_name( &#39;we-customer-review__body--modal&#39;).text) #리뷰 코멘트 # 박스 닫기 exit = driver.find_element_by_class_name(&#39;we-modal__close&#39;) exit.click() print(id, &#39;더 보기 클릭&#39;) except: review.append(driver.find_element_by_id(f&#39;{id[1]}&#39;). find_element_by_class_name(&#39;we-clamp&#39;).text) #리뷰 코멘트 print(id, &#39;pass&#39;) print(&#39; n 크롤링 완료&#39;) . (0, &#39;ember89&#39;) pass (1, &#39;ember91&#39;) pass (2, &#39;ember93&#39;) pass (3, &#39;ember95&#39;) 더 보기 클릭 (4, &#39;ember97&#39;) 더 보기 클릭 (5, &#39;ember99&#39;) 더 보기 클릭 (6, &#39;ember101&#39;) 더 보기 클릭 (7, &#39;ember103&#39;) 더 보기 클릭 (8, &#39;ember105&#39;) 더 보기 클릭 (9, &#39;ember107&#39;) 더 보기 클릭 (10, &#39;ember120&#39;) 더 보기 클릭 (11, &#39;ember122&#39;) 더 보기 클릭 (12, &#39;ember124&#39;) 더 보기 클릭 (13, &#39;ember126&#39;) 더 보기 클릭 (14, &#39;ember128&#39;) 더 보기 클릭 (15, &#39;ember130&#39;) 더 보기 클릭 (16, &#39;ember132&#39;) 더 보기 클릭 (17, &#39;ember134&#39;) 더 보기 클릭 (18, &#39;ember136&#39;) 더 보기 클릭 (19, &#39;ember138&#39;) 더 보기 클릭 (20, &#39;ember150&#39;) 더 보기 클릭 (21, &#39;ember152&#39;) 더 보기 클릭 (22, &#39;ember154&#39;) 더 보기 클릭 (23, &#39;ember156&#39;) 더 보기 클릭 (24, &#39;ember158&#39;) 더 보기 클릭 (25, &#39;ember160&#39;) 더 보기 클릭 (26, &#39;ember162&#39;) 더 보기 클릭 (27, &#39;ember164&#39;) 더 보기 클릭 (28, &#39;ember166&#39;) 더 보기 클릭 (29, &#39;ember168&#39;) 더 보기 클릭 (30, &#39;ember180&#39;) 더 보기 클릭 (31, &#39;ember182&#39;) 더 보기 클릭 (32, &#39;ember184&#39;) 더 보기 클릭 (33, &#39;ember186&#39;) 더 보기 클릭 (34, &#39;ember188&#39;) pass (35, &#39;ember190&#39;) 더 보기 클릭 (36, &#39;ember192&#39;) 더 보기 클릭 (37, &#39;ember194&#39;) pass (38, &#39;ember196&#39;) 더 보기 클릭 (39, &#39;ember198&#39;) 더 보기 클릭 (40, &#39;ember205&#39;) pass (41, &#39;ember207&#39;) 더 보기 클릭 (42, &#39;ember209&#39;) 더 보기 클릭 (43, &#39;ember211&#39;) pass (44, &#39;ember213&#39;) 더 보기 클릭 크롤링 완료 . 2. &#53356;&#47204;&#47553; &#45936;&#51060;&#53552; &#51204;&#52376;&#47532; . title_lst = [] for i in title: if i.text != &#39;개발자 답변&#39;: title_lst.append(i.text) user_lst = [] for i in user: user_lst.append(i.text) date_lst = [] for i in date: z = i.get_attribute(&#39;aria-label&#39;) date_lst.append( # str -&gt; datetime 변환 datetime.datetime.strptime( z.replace(&#39;년 &#39;, &#39;-&#39;).replace(&#39;월 &#39;, &#39;-&#39;).replace(&#39;일&#39;, &#39;&#39;), &quot;%Y-%m-%d&quot;)) stars_lst = [] for i in stars: stars_lst.append( # int로 변환 int(i.get_attribute(&#39;aria-label&#39;).split(&#39;/&#39;)[0]) ) len(title_lst), len(date_lst), len(stars_lst), len(user_lst) . (45, 45, 45, 45) . df = pd.DataFrame() df[&#39;app&#39;] = [&#39;자란다&#39; for i in range(len(title_lst))] df[&#39;title&#39;] = title_lst df[&#39;user&#39;] = user_lst df[&#39;date&#39;] = date_lst df[&#39;stars&#39;] = stars_lst df[&#39;comment&#39;] = review print(df.shape) print(df.dtypes) df.head() . (45, 6) app object title object user object date datetime64[ns] stars int64 comment object dtype: object . app title user date stars comment . 0 자란다 | 좋아요 | maum.c | 2019-10-31 | 5 | 원래 쓰고 있었는데 앱 나오니 훨씬 편하고 좋아요 나름 꽤 초창기부터 써왔는데 점점... | . 1 자란다 | 드디어 앱이 나왔군요~~! | 파랑땡땡구리 | 2019-07-13 | 5 | 항상 감사하고 있습니다. 우리 애들 자란다 선생님 너무 좋아해요. 계속 자란다 선생... | . 2 자란다 | 선생님이 너무좋았답니다. | terry11117 | 2020-03-26 | 5 | 다른 돌봄회사들보다 체계적이어서 감동받았어요. 우선 자란다 선생님의 선택의 폭이 넓... | . 3 자란다 | 아이들이 자란다 선생님을 너무 좋아해요~~ | ysmom23 | 2019-09-19 | 5 | 엄마는 힘들어서 못해주는 몸으로 놀아주기.. 자란쌤이 아이와 함께 놀아주니 아이가 ... | . 4 자란다 | 맞벌이 부부에게 큰 힘이 됩니다 | 별2개 | 2021-07-30 | 5 | 이런 리뷰를 잘 안쓰는데 자란다에게 고마운 마음을 표현하고자 끄적여봅니다^^ n n... | . 3. &#48709;&#53244;&#47532;&#47196; &#51204;&#49569; . 3-1. &#48709;&#53244;&#47532;&#47196; &#51204;&#49569; . from google.oauth2 import service_account import pandas_gbq . cd = service_account.Credentials.from_service_account_file( &#39;/Users/choeinbeom/Downloads/tidal-surf-302413-582aad3f1e46.json&#39;) project_id = &#39;tidal-surf-302413&#39; destination_table = &#39;test_jaranda.reviews&#39; df.to_gbq(destination_table,project_id,if_exists=&#39;append&#39;,credentials=cd) print(&#39;migration complete&#39;) . 1it [00:02, 2.76s/it] . migration complete . . 3-2. &#48709;&#53244;&#47532; &#45936;&#51060;&#53552; &#47196;&#46300; &#48143; &#54869;&#51064; . from google.cloud import bigquery . cd = service_account.Credentials.from_service_account_file( &#39;/Users/choeinbeom/Downloads/tidal-surf-302413-582aad3f1e46.json&#39;) client = bigquery.Client (project = &#39;tidal-surf-302413&#39; , credentials = cd) query = &#39;SELECT * FROM test_jaranda.reviews&#39; df_result = client.query(query).to_dataframe() print(df_result.shape) print(df_result.dtypes) df_result.head() . (339, 6) title object user object date datetime64[ns, UTC] stars int64 comment object app object dtype: object . title user date stars comment app . 0 회원탈퇴 | 구름바이러스 | 2019-12-10 00:00:00+00:00 | 5 | 회원탈퇴 어떻게 하나요 선생님 지원하려다 앱 따로있는거 모르고 가입했는데 | 자란다 | . 1 선생님들이 우수해요 | nikiiiiaaaasss | 2020-09-23 00:00:00+00:00 | 5 | 평균적으로 우수한 선생님이 많아요. 교사관리가 n잘 되고있는것 같아요 | 자란다 | . 2 좋아요 | maum.c | 2019-10-31 00:00:00+00:00 | 5 | 원래 쓰고 있었는데 앱 나오니 훨씬 편하고 좋아요 나름 꽤 초창기부터 써왔는데 점점... | 자란다 | . 3 덕분에 아이도 저도 잘 놀아요 | Ameri.cano | 2019-10-31 00:00:00+00:00 | 5 | 자란다 서비스를 쓴건 솔직히 아이를 위해서이기도 했지만, 저를 위해서 이기도 했어요... | 자란다 | . 4 자란다 앱 너무 편하네요 | 노수지 | 2019-10-31 00:00:00+00:00 | 5 | 예전에 웹으로 사용했었는데 정말 앱이 나와서 사용하기 편리해졌네요. 항상 느끼는거지... | 자란다 | . crong = df_result[df_result[&#39;app&#39;]==&#39;째깍악어&#39;] . newjrd = df_result[df_result[&#39;app&#39;]==&#39;자란다&#39;].sort_values(by = &#39;date&#39;, ascending=False) newjrd[newjrd[[&#39;title&#39;, &#39;user&#39;]].duplicated()] . title user date stars comment app . 40 선생님 관리가 제대로 안되는듯 | nkein82 | 2021-06-08 00:00:00+00:00 | 5 | 예약하고 결재까지 다했는데 뜬금없이 그날은 안된다면서 하루전에 일방적으로 취소해달라... | 자란다 | . 46 신청서작성시 단계가 안 넘어가요!!! | 사용하고싶어요! | 2021-05-19 00:00:00+00:00 | 1 | 너무 화가나려하네요! 방문일정 등록하려는데 방문 종류 선택할때도 터치가 안먹는건지 ... | 자란다 | . 44 워킹맘은 절대 쓰지 마세요 | VIP멤버펑 | 2021-03-31 00:00:00+00:00 | 1 | 일부러 추천율 100프로인 잘자란 선생님 골라서 (돌봄 시간도 100시간 넘는) 신... | 자란다 | . 33 너무 자주 어플이 먹통이 되어요ㅠㅠ | 11166554443388 | 2021-03-17 00:00:00+00:00 | 5 | 자주 수업 리스트도 뜨지 않고 어플이 부팅되는데 너무 오래 걸려요ㅠㅠ | 자란다 | . 47 회원탈퇴 기능이 없네요 | hhhhhhhh28472919 | 2021-01-22 00:00:00+00:00 | 1 | 너무 찜찜하고 신고하려다 말았는데 회원 탈퇴 기능 만들어주세요 n이런걸 리뷰에 써야... | 자란다 | . 24 ㅇㅇㅇㅇ | Icefall입니다 | 2020-11-27 00:00:00+00:00 | 5 | 카카오페이 등록 안됨 앱 느리고 오류 많음 ㅠ n선생님 보다가 뒤로가기 안뎀 | 자란다 | . 36 오늘 자란다의 일방적 “신청취소” 후 느낀점 | 사노리 | 2020-09-25 00:00:00+00:00 | 5 | 초1아들 영어 첫공부에 대한 블로그 추천글이 많아 학원보내기 불안한 시기에 적절히 ... | 자란다 | . 52 아이폰에서 최근에 계속 로딩만 뜨고 넘어가지를 않네요 ㅠㅠ 저만 그런건가요 | 저만안되나요 | 2020-08-04 00:00:00+00:00 | 2 | 앱 실행하면 첫 화면에서 로딩 아이콘만 뜨고 넘어가지를 못하네요. 잠깐 그런가보다 ... | 자란다 | . 32 탈퇴방법 | ㅜㅏ나니미 | 2020-06-26 00:00:00+00:00 | 5 | 선생님 가입하려했는데 실수로 부모님으로 가입해서 다시 가입하려니까 이미 핸드폰번호가... | 자란다 | . 8 좋은 선생님 추천 | 해해해햇 | 2020-01-27 00:00:00+00:00 | 5 | 좋은 선생님이 너무 좋아요 | 자란다 | . 0 회원탈퇴 | 구름바이러스 | 2019-12-10 00:00:00+00:00 | 5 | 회원탈퇴 어떻게 하나요 선생님 지원하려다 앱 따로있는거 모르고 가입했는데 | 자란다 | . 54 회원탈퇴 | 마사룰루랄ㄹ라 | 2019-10-31 00:00:00+00:00 | 4 | 앱과 웹 모두 뒤져보아도 회원탈퇴 기능이 없네요. 업데이트 바랍니다. | 자란다 | .",
            "url": "https://onedayin21c.github.io/IBblog/selenium/jupyter/bigquery/2021/08/13/%EC%95%B1%EC%8A%A4%ED%86%A0%EC%96%B4-%EB%A6%AC%EB%B7%B0-%ED%81%AC%EB%A1%A4%EB%A7%81-(3).html",
            "relUrl": "/selenium/jupyter/bigquery/2021/08/13/%E1%84%8B%E1%85%A2%E1%86%B8%E1%84%89%E1%85%B3%E1%84%90%E1%85%A9%E1%84%8B%E1%85%A5-%E1%84%85%E1%85%B5%E1%84%87%E1%85%B2-%E1%84%8F%E1%85%B3%E1%84%85%E1%85%A9%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC-(3).html",
            "date": " • Aug 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://onedayin21c.github.io/IBblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://onedayin21c.github.io/IBblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://onedayin21c.github.io/IBblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://onedayin21c.github.io/IBblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}